data <- read.csv("Mall_Customers.csv")
customer_data<- read.csv("Mall_Customers.csv")
str(customer_data)
names(customer_data)
head(customer_data)
summary(customer_data$Age)
summary(customer_data$Age)
sd(customer_data$Spending.Score..1.100.)
barplot(a,main="Using BarPlot to display Gender Comparision",
ylab="Count",
xlab="Gender",
col=rainbow(2),
legend=rownames(a))
a <- c(Male = 30, Female = 25)
barplot(a,
main = "Using BarPlot to display Gender Comparison",
ylab = "Count",
xlab = "Gender",
col = rainbow(2),
legend = names(a))
pie3D(a,labels=lbs,
main="Pie Chart Depicting Ratio of Female and Male")
install.packages("plotrix")
install.packages("C:/Users/samar/Downloads/plotrix_3.7-4.tar.gz", repos = NULL, type = "source")
pie3D(a,labels=lbs,
main="Pie Chart Depicting Ratio of Female and Male")
pct=round(a/sum(a)*100)
lbs=paste(c("Female","Male")," ",pct,"%",sep=" ")
library(plotrix)
pie3D(a,labels=lbs,
main="Pie Chart Depicting Ratio of Female and Male")
summary(customer_data$Age)
hist(customer_data$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
boxplot(customer_data$Age,
col="ff0066",
main="Boxplot for Descriptive Analysis of Age")
boxplot(customer_data$Age,
col="ff0066",
main="Boxplot for Descriptive Analysis of Age")
boxplot(customer_data$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
source("~/projet_fouille/script/code.R")
hist(customer_data$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
hist(customer_data$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
hist(customer_data$Age,
col="blue",
main="Histogram to Show Count of Age Class",
xlab="Age Class",
ylab="Frequency",
labels=TRUE)
boxplot(customer_data$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
boxplot(customer_data$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
boxplot(customer_data$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
source("~/projet_fouille/script/code.R")
boxplot(customer_data$Age,
col="#ff0066",
main="Boxplot for Descriptive Analysis of Age")
hist(customer_data$Annual.Income..k..,
col="#660033",
main="Histogram for Annual Income",
xlab="Annual Income Class",
ylab="Frequency",
labels=TRUE)
polygon(density(customer_data$Annual.Income..k..),
col="#ccff66")
plot(density(customer_data$Annual.Income..k..),
col="yellow",
main="Density Plot for Annual Income",
xlab="Annual Income Class",
ylab="Density")
polygon(density(customer_data$Annual.Income..k..),
col="#ccff66")
summary(customer_data$Spending.Score..1.100.)
Min. 1st Qu. Median Mean 3rd Qu. Max.
## 1.00 34.75 50.00 50.20 73.00 99.00
boxplot(customer_data$Spending.Score..1.100.,
horizontal=TRUE,
col="#990000",
main="BoxPlot for Descriptive Analysis of Spending Score")
hist(customer_data$Spending.Score..1.100.,
main="HistoGram for Spending Score",
xlab="Spending Score Class",
ylab="Frequency",
col="#6600cc",
labels=TRUE)
library(purrr)
set.seed(123)
# function to calculate total intra-cluster sum of square
iss <- function(k) {
kmeans(customer_data[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
}
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
plot(k.values, iss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
library(purrr)
library(purrr)
set.seed(123)
# Vérifier si les colonnes sont bien numériques
str(customer_data[,3:5])
# Fonction pour calculer la somme totale intra-cluster
iss <- function(k) {
tryCatch({
kmeans(customer_data[,3:5], k, iter.max=100, nstart=100, algorithm="Lloyd")$tot.withinss
}, error = function(e) {
message("Erreur dans iss pour k = ", k, ": ", e$message)
NA
})
}
# Générer les valeurs de k et calculer iss_values
k.values <- 1:10
iss_values <- map_dbl(k.values, iss)
# Vérifier s'il y a des valeurs manquantes dans iss_values
print(iss_values)
# Tracer le graphique si les valeurs sont valides
if (all(!is.na(iss_values))) {
plot(k.values, iss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total intra-clusters sum of squares")
} else {
message("Les valeurs iss contiennent des erreurs et ne peuvent pas être tracées.")
}
install.packages("https://cran.r-project.org/src/contrib/Archive/purrr/purrr_0.2.5.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/samar/Downloads/purrr_0.2.5.tar.gz", repos = NULL, type = "source")
set.seed(123)
iss_values <- sapply(k.values, iss)
plot(k.values, iss_values,
type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K",
ylab = "Total intra-clusters sum of squares")
library(cluster)
library(gridExtra)
library(grid)
k2<-kmeans(customer_data[,3:5],2,iter.max=100,nstart=50,algorithm="Lloyd")
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")))
library(cluster)
library(gridExtra)
install.packages("gridExtra")
library(cluster)
library(gridExtra)
library(grid)
k2<-kmeans(customer_data[,3:5],2,iter.max=100,nstart=50,algorithm="Lloyd")
s2<-plot(silhouette(k2$cluster,dist(customer_data[,3:5],"euclidean")))
k3<-kmeans(customer_data[,3:5],3,iter.max=100,nstart=50,algorithm="Lloyd")
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")))
dev.off()
s2 <- plot(silhouette(k2$cluster, dist(customer_data[,3:5], "euclidean")))
s3 <- plot(silhouette(k3$cluster, dist(customer_data[,3:5], "euclidean")))
k3<-kmeans(customer_data[,3:5],3,iter.max=100,nstart=50,algorithm="Lloyd")
s3<-plot(silhouette(k3$cluster,dist(customer_data[,3:5],"euclidean")))
k4<-kmeans(customer_data[,3:5],4,iter.max=100,nstart=50,algorithm="Lloyd")
s4<-plot(silhouette(k4$cluster,dist(customer_data[,3:5],"euclidean")))
k5<-kmeans(customer_data[,3:5],5,iter.max=100,nstart=50,algorithm="Lloyd")
s5<-plot(silhouette(k5$cluster,dist(customer_data[,3:5],"euclidean")))
k6<-kmeans(customer_data[,3:5],6,iter.max=100,nstart=50,algorithm="Lloyd")
s6<-plot(silhouette(k6$cluster,dist(customer_data[,3:5],"euclidean")))
k7<-kmeans(customer_data[,3:5],7,iter.max=100,nstart=50,algorithm="Lloyd")
s7<-plot(silhouette(k7$cluster,dist(customer_data[,3:5],"euclidean")))
k8<-kmeans(customer_data[,3:5],8,iter.max=100,nstart=50,algorithm="Lloyd")
s8<-plot(silhouette(k8$cluster,dist(customer_data[,3:5],"euclidean")))
k9<-kmeans(customer_data[,3:5],9,iter.max=100,nstart=50,algorithm="Lloyd")
s9<-plot(silhouette(k9$cluster,dist(customer_data[,3:5],"euclidean")))
k10<-kmeans(customer_data[,3:5],10,iter.max=100,nstart=50,algorithm="Lloyd")
s10<-plot(silhouette(k10$cluster,dist(customer_data[,3:5],"euclidean")))
library(NbClust)
install.packages("NbClust")
library(factoextra)
install.packages("factoextra")
install.packages("NbClust")
library(NbClust)
library(factoextra)
install.packages("factoextra")
install.packages("ggplot2")
install.packages("ggplot")
install.packages("FactoMineR")
install.packages("tidyr")
install.packages("base64enc")
install.packages("callr")
install.packages("commonmark")
install.packages("curl")
install.packages("desc")
install.packages("diptest")
install.packages("doParallel")
install.packages("flexmix")
install.packages("C:/Users/samar/Downloads/ggplot2_3.3.0.tar.gz", repos = NULL, type = "source")
install.packages("tibble")
library(factoextra)
install.packages("factoextra")
install.packages("C:/Users/samar/Downloads/dplyr_0.8.3.tar.gz", repos = NULL, type = "source")
install.packages("tidyselect")
library(NbClust)
set.seed(123)
nb <- NbClust(customer_data[, 3:5],
distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "kmeans",
index = "silhouette")
library(NbClust)
set.seed(123)
nb <- NbClust(customer_data[, 3:5],
distance = "euclidean",
min.nc = 2, max.nc = 10,
method = "kmeans",
index = "silhouette")
library(ggplot2)
k_values <- 2:10
sil_scores <- silhouette_scores[k_values]
# Création d'un dataframe
df <- data.frame(k = k_values, silhouette = sil_scores)
# Visualisation
ggplot(df, aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Indice de silhouette pour différents k",
x = "Nombre de clusters (k)",
y = "Score de silhouette")
library(cluster)
silhouette_scores <- numeric(10)
# Calcul de l'indice de silhouette pour chaque nombre de clusters
for (k in 2:10) {
kmeans_model <- kmeans(customer_data[, 3:5], centers = k)
silhouette_scores[k] <- mean(silhouette(kmeans_model$cluster, dist(customer_data[, 3:5]))[, 3])
}
# Trouver le nombre optimal de clusters
optimal_k <- which.max(silhouette_scores)
print(optimal_k)
library(cluster)
# Utiliser le nombre optimal de clusters trouvé par NbClust
optimal_k <- nb$Best.nc[1]
# Appliquer le clustering k-means
kmeans_model <- kmeans(customer_data[, 3:5], centers = optimal_k)
# Calcul de l'indice de silhouette
silhouette_scores <- silhouette(kmeans_model$cluster, dist(customer_data[, 3:5]))
# Visualisation du graphique de silhouette
plot(silhouette_scores, col = 1:optimal_k, border = NA)
library(ggplot2)
# Calculer les scores de silhouette pour k de 2 à 10
silhouette_scores <- sapply(2:10, function(k) {
km <- kmeans(customer_data[, 3:5], centers = k)
ss <- silhouette(km$cluster, dist(customer_data[, 3:5]))
mean(ss[, 3])  # Moyenne des scores de silhouette
})
# Préparation des données pour la visualisation
df <- data.frame(Clusters = 2:10, Silhouette_Score = silhouette_scores)
# Visualisation avec ggplot2
ggplot(df, aes(x = Clusters, y = Silhouette_Score)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = "Indice de silhouette pour différents nombres de clusters",
x = "Nombre de clusters",
y = "Score de silhouette moyen")
library(ggplot2)
# Extraire les valeurs de gap statistic
gap_df <- as.data.frame(stat_gap$Tab)
gap_df$Clusters <- 1:nrow(gap_df)
# Créer le graphique avec ggplot2
ggplot(gap_df, aes(x = Clusters, y = gap, ymin = gap - SE.sim, ymax = gap + SE.sim)) +
geom_line(color = "blue") +
geom_point(color = "red") +
geom_errorbar(width = 0.2) +
labs(title = "Statistique de l'écart pour déterminer le nombre optimal de clusters",
x = "Nombre de clusters",
y = "Statistique de l'écart (Gap Statistic)") +
theme_minimal()
library(cluster)
set.seed(125)
stat_gap <- clusGap(customer_data[, 3:5], FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Afficher le contenu de stat_gap$Tab pour vérifier les noms de colonnes
print(stat_gap$Tab)
library(ggplot2)
# Extraire les données de gap statistic
gap_df <- data.frame(
Clusters = 1:nrow(stat_gap$Tab),  # Nombre de clusters
gap = stat_gap$Tab[, "gap"],      # Statistique de l'écart
SE.sim = stat_gap$Tab[, "SE.sim"] # Erreur standard
)
# Créer le graphique
ggplot(gap_df, aes(x = Clusters, y = gap)) +
geom_line(color = "blue") +
geom_point(color = "red") +
geom_errorbar(aes(ymin = gap - SE.sim, ymax = gap + SE.sim), width = 0.2) +
labs(title = "Statistique de l'écart pour déterminer le nombre optimal de clusters",
x = "Nombre de clusters",
y = "Statistique de l'écart (Gap Statistic)") +
theme_minimal()
library(rhdfs)
library(dfs)
source("~/projet_fouille/script/code.R", encoding = 'UTF-8')
